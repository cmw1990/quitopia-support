import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';
import { ReportContent } from './types';

/**
 * Generate a PDF report from the provided content
 */
export const generatePDF = async (content: ReportContent): Promise<{ url: string }> => {
  const doc = new jsPDF();
  const { template, userData, dateRange, data, includeNotes } = content;

  // Add header
  doc.setFontSize(20);
  doc.text(template.name, 20, 20);

  // Add date range
  doc.setFontSize(12);
  doc.text(`Report Period: ${dateRange.startDate} to ${dateRange.endDate}`, 20, 30);

  // Add user information if included
  if (userData) {
    doc.text('Patient Information', 20, 45);
    doc.setFontSize(10);
    doc.text(`Name: ${userData.full_name}`, 25, 55);
    doc.text(`Date of Birth: ${userData.dob ? format(new Date(userData.dob), 'MM/dd/yyyy') : 'N/A'}`, 25, 60);
    doc.text(`Quit Date: ${userData.quit_date ? format(new Date(userData.quit_date), 'MM/dd/yyyy') : 'N/A'}`, 25, 65);
  }

  let yPosition = userData ? 80 : 45;

  // Add sections
  template.sections.filter(s => s.selected).forEach(section => {
    const sectionData = data[section.dataType] || [];

    // Add section header
    doc.setFontSize(14);
    doc.text(section.title, 20, yPosition);
    yPosition += 10;

    // Add section description
    doc.setFontSize(10);
    doc.text(section.description, 20, yPosition);
    yPosition += 10;

    // Add data table
    if (sectionData.length > 0) {
      const tableData = sectionData.map(item => {
        switch (section.dataType) {
          case 'smoking':
            return [
              format(new Date(item.date), 'MM/dd/yyyy'),
              item.cigarettes,
              item?.cravings,
              item.triggers?.join(', ') || ''
            ];
          case 'mood':
            return [
              format(new Date(item.date), 'MM/dd/yyyy'),
              item.score,
              item.notes || ''
            ];
          default:
            return [
              format(new Date(item.date), 'MM/dd/yyyy'),
              item.value,
              item.notes || ''
            ];
        }
      });

      const headers = getTableHeaders(section.dataType);
      (doc as any).autoTable({
        head: [headers],
        body: tableData,
        startY: yPosition,
        margin: { left: 20 }
      });

      yPosition = (doc as any).lastAutoTable.finalY + 15;
    } else {
      doc.text('No data available for this period', 20, yPosition);
      yPosition += 15;
    }

    // Add chart if applicable
    if (section.chartType !== 'none' && sectionData.length > 0) {
      // Generate chart using Chart.js and convert to image
      // This would be implemented in a real application
      yPosition += 100;
    }
  });

  // Add notes if included
  if (includeNotes) {
    doc.addPage();
    doc.setFontSize(14);
    doc.text('Notes & Observations', 20, 20);
    doc.setFontSize(10);

    let notesText = '';
    Object.entries(data).forEach(([type, items]) => {
      items.forEach((item: any) => {
        if (item.notes) {
          notesText += `${format(new Date(item.date), 'MM/dd/yyyy')} (${type}): ${item.notes}\n\n`;
        }
      });
    });

    if (notesText) {
      doc.text(notesText, 20, 35);
    } else {
      doc.text('No notes available for this period', 20, 35);
    }
  }

  // Add disclaimer
  const pageCount = doc.getNumberOfPages();
  doc.setPage(pageCount);
  doc.setFontSize(8);
  doc.text(
    'This report was generated by Mission Fresh. Data is based on self-reported information and may not be medically verified.',
    20,
    doc.internal.pageSize.height - 20
  );

  // Save the PDF and return the URL
  const pdfBlob = doc.output('blob');
  return {
    url: URL.createObjectURL(pdfBlob)
  };
};

function getTableHeaders(dataType: string): string[] {
  switch (dataType) {
    case 'smoking':
      return ['Date', 'Cigarettes', 'Craving Level', 'Triggers'];
    case 'mood':
      return ['Date', 'Mood Score', 'Notes'];
    default:
      return ['Date', 'Value', 'Notes'];
  }
} 