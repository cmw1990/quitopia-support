import { format } from 'date-fns';
import { ReportContent, LogEntry } from './types';

/**
 * Generate a CSV report from the provided content
 */
export const generateCSV = async (content: ReportContent): Promise<{ url: string }> => {
  const { template, userData, dateRange, data, includeNotes } = content;
  const lines: string[] = [];

  // Add report header
  lines.push(`"${template.name}"`);
  lines.push(`"Report Period: ${dateRange.startDate} to ${dateRange.endDate}"`);
  lines.push('');

  // Add user information if included
  if (userData) {
    lines.push('"Patient Information"');
    lines.push(`"Name","${userData.full_name}"`);
    lines.push(`"Date of Birth","${userData.dob ? format(new Date(userData.dob), 'MM/dd/yyyy') : 'N/A'}"`);
    lines.push(`"Quit Date","${userData.quit_date ? format(new Date(userData.quit_date), 'MM/dd/yyyy') : 'N/A'}"`);
    lines.push('');
  }

  // Add sections
  template.sections.filter(s => s.selected).forEach(section => {
    const sectionData = data[section.dataType] || [];

    // Add section header
    lines.push(`"${section.title}"`);
    lines.push(`"${section.description}"`);
    lines.push('');

    // Add data table
    if (sectionData.length > 0) {
      // Add headers
      const headers = getTableHeaders(section.dataType);
      lines.push(headers.map(h => `"${h}"`).join(','));

      // Add data rows
      sectionData.forEach(item => {
        const row = formatDataRow(item, section.dataType);
        lines.push(row.map(cell => `"${cell}"`).join(','));
      });
    } else {
      lines.push('"No data available for this period"');
    }

    lines.push('');
    lines.push('');
  });

  // Add notes if included
  if (includeNotes) {
    lines.push('"Notes & Observations"');
    lines.push('');

    let hasNotes = false;
    Object.entries(data).forEach(([type, items]) => {
      items.forEach((item: LogEntry) => {
        if (item.notes) {
          hasNotes = true;
          lines.push(`"${format(new Date(item.date), 'MM/dd/yyyy')}","${type}","${item.notes}"`);
        }
      });
    });

    if (!hasNotes) {
      lines.push('"No notes available for this period"');
    }
  }

  // Add disclaimer
  lines.push('');
  lines.push('"This report was generated by Mission Fresh. Data is based on self-reported information and may not be medically verified."');

  // Create CSV file
  const csvContent = lines.join('\n');
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  return {
    url: URL.createObjectURL(blob)
  };
};

function getTableHeaders(dataType: string): string[] {
  switch (dataType) {
    case 'smoking':
      return ['Date', 'Cigarettes', 'Craving Level', 'Triggers'];
    case 'mood':
      return ['Date', 'Mood Score', 'Notes'];
    default:
      return ['Date', 'Value', 'Notes'];
  }
}

function formatDataRow(item: LogEntry, dataType: string): string[] {
  const date = format(new Date(item.date), 'MM/dd/yyyy');

  switch (dataType) {
    case 'smoking':
      const smokingItem = item as any;
      return [
        date,
        smokingItem.cigarettes?.toString() || '0',
        smokingItem?.cravings?.toString() || '0',
        smokingItem.triggers?.join(', ') || ''
      ];
    case 'mood':
      const moodItem = item as any;
      return [
        date,
        moodItem.score?.toString() || '0',
        moodItem.notes || ''
      ];
    default:
      return [
        date,
        item.value?.toString() || '0',
        item.notes || ''
      ];
  }
} 