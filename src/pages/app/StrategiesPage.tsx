import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/components/AuthProvider';
import { useToast } from '@/components/ui/use-toast';
import { supabaseRequest } from '@/utils/supabaseRequest';
import { Lightbulb, BookOpen, CheckCircle, PlusCircle, Star, ExternalLink, Search, Filter, X, Loader2, ChevronRight } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from '@/components/ui/label';
import { Strategy } from '@/types/strategies';
import { motion } from 'framer-motion';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Skeleton } from '@/components/ui/skeleton';
import { cn } from '@/lib/utils';
import { AddStrategyDialog } from '@/components/AddStrategyDialog';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";

// Type for user ratings (matches the new table)
interface UserStrategyRating {
    id?: string; // Optional as it's generated by DB
    user_id: string;
    strategy_id: string;
    rating: number; // 1-5
    // created_at, updated_at handled by DB
}

// Extend Strategy type locally to include the user rating directly
type StrategyWithRating = Strategy & { userRating?: number | null };

const StrategiesPage: React.FC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [strategies, setStrategies] = useState<StrategyWithRating[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSavingRating, setIsSavingRating] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [learnMoreStrategy, setLearnMoreStrategy] = useState<Strategy | null>(null);

  useEffect(() => {
      const fetchData = async () => {
          if (!user?.id) return;
          setIsLoading(true);
          try {
              // Fetch strategies and ratings in parallel
              const [fetchedStrategies, userRatings] = await Promise.all([
                   supabaseRequest<Strategy[]>(
                      'focus_strategies',
                      'GET',
                      { orderBy: { column: 'title', ascending: true } }
                   ),
                   supabaseRequest<UserStrategyRating[]>(
                       'user_strategy_ratings',
                       'GET',
                       { filters: { user_id: user.id } }
                   )
              ]);

              // Create a map for quick rating lookup
              const ratingsMap = new Map<string, number>();
              (userRatings || []).forEach(r => {
                  ratingsMap.set(r.strategy_id, r.rating);
              });

              // Merge strategies with user ratings
              const strategiesWithRatings: StrategyWithRating[] = (fetchedStrategies || []).map(strategy => ({
                   ...strategy,
                   userRating: ratingsMap.get(strategy.id) ?? null
              }));

              setStrategies(strategiesWithRatings);

          } catch (error: any) {
              console.error("Error fetching strategies or ratings:", error);
              toast({ title: 'Error Loading Data', description: error.message, variant: 'destructive' });
          } finally {
              setIsLoading(false);
          }
      };
      fetchData();
  }, [user, toast]);

  const handleRateEffectiveness = useCallback(async (strategyId: string, rating: number) => {
      if (!user?.id) return;
      const effectiveRating = rating === 0 ? null : rating;

      // Optimistic update
      const originalStrategies = strategies;
      setStrategies(prev => prev.map(s => s.id === strategyId ? { ...s, userRating: effectiveRating } : s));
      setIsSavingRating(strategyId);

      try {
          const ratingData: Partial<UserStrategyRating> = {
              user_id: user.id,
              strategy_id: strategyId,
              rating: effectiveRating ?? undefined,
          };

          await supabaseRequest<UserStrategyRating>(
              'user_strategy_ratings',
              'POST',
              {
                   data: ratingData,
                   upsert: true,
              }
          );

          toast({ title: 'Rating Saved', description: `Your rating for this strategy has been saved.` });

      } catch (error: any) {
          console.error("Error saving rating:", error);
          toast({ title: 'Error Saving Rating', description: error.message, variant: 'destructive' });
          setStrategies(originalStrategies);
      } finally {
          setIsSavingRating(null);
      }
  }, [user, strategies, toast]);

  const handleAddStrategy = async (newStrategyData: Pick<Strategy, 'title' | 'description' | 'category'>) => {
      if (!user?.id) return false;
      try {
          const dataToInsert = { ...newStrategyData, user_id: user.id };
          const newStrategy = await supabaseRequest<Strategy>(
              'focus_strategies',
              'POST',
              { data: dataToInsert }
          );
          setStrategies(prev => [...prev, { ...newStrategy, userRating: null }]);
          toast({ title: 'Strategy Added', description: `'${newStrategy.title}' has been added.` });
          return true;
      } catch (error: any) {
          console.error("Error adding strategy:", error);
          toast({ title: 'Error Adding Strategy', description: error.message, variant: 'destructive' });
          return false;
      }
  };

   const filteredStrategies = useMemo(() => {
       return strategies.filter(strategy => {
           const matchesSearch = strategy.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                 strategy.description.toLowerCase().includes(searchTerm.toLowerCase());
           const matchesCategory = filterCategory === 'all' || strategy.category === filterCategory;
           return matchesSearch && matchesCategory;
       });
   }, [strategies, searchTerm, filterCategory]);

   const categories = useMemo(() => {
       return ['all', ...Array.from(new Set(strategies.map(s => s.category)))];
   }, [strategies]);

  // Loading Skeleton
  const renderSkeleton = () => (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-pulse">
          <Skeleton className="h-60 rounded-lg" />
          <Skeleton className="h-60 rounded-lg" />
          <Skeleton className="h-60 rounded-lg" />
          <Skeleton className="h-60 rounded-lg" />
          <Skeleton className="h-60 rounded-lg" />
          <Skeleton className="h-60 rounded-lg" />
      </div>
  );
  
  // Animation Variants
  const containerVariants = { hidden: { opacity: 0 }, visible: { opacity: 1, transition: { staggerChildren: 0.05 } } };
  const itemVariants = { hidden: { opacity: 0, y: 10 }, visible: { opacity: 1, y: 0, transition: { duration: 0.3, ease: "easeOut" } } };

  // Function to open the Learn More dialog
  const openLearnMoreDialog = (strategy: Strategy) => {
    setLearnMoreStrategy(strategy);
  };

  // Function to close the Learn More dialog
  const closeLearnMoreDialog = () => {
    setLearnMoreStrategy(null);
  };

  return (
    <motion.div 
      className="space-y-6 p-4 md:p-6 lg:p-8"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
     >
        <motion.div variants={itemVariants} className="flex justify-between items-start flex-wrap gap-4">
            <div className="space-y-1">
                <h1 className="text-2xl md:text-3xl font-bold tracking-tight flex items-center gap-2">
                    <Lightbulb className="h-6 w-6 text-yellow-400" /> Focus Strategies
                </h1>
                <p className="text-muted-foreground">
                    Explore and rate techniques. Add your own custom strategies.
                </p>
            </div>
            <Button onClick={() => setIsAddDialogOpen(true)}>
                <PlusCircle size={16} className="mr-2"/> Add Custom Strategy
            </Button>
        </motion.div>

        <motion.div variants={itemVariants}>
            <Card className="border shadow-sm">
                <CardContent className="p-3 flex flex-col sm:flex-row gap-3">
                    <div className="relative flex-grow">
                         <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                         <Input
                            type="search"
                            placeholder="Search strategies..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="pl-8 w-full h-9"
                        />
                    </div>
                    <Select value={filterCategory} onValueChange={setFilterCategory} disabled={isLoading}>
                         <SelectTrigger className="w-full sm:w-[200px] h-9">
                             <Filter className="h-4 w-4 mr-2 opacity-50"/>
                             <SelectValue placeholder="Filter category" />
                         </SelectTrigger>
                         <SelectContent>
                             {categories.map(category => (
                                <SelectItem key={category} value={category}>
                                    {category === 'all' ? 'All Categories' : category}
                                </SelectItem>
                             ))}
                         </SelectContent>
                     </Select>
                </CardContent>
            </Card>
        </motion.div>

        <motion.div variants={itemVariants}>
           <Card className="border-dashed border-primary/50 bg-primary/5">
               <CardHeader className="pb-3">
                   <CardTitle className="text-lg font-semibold flex items-center gap-2"><Star size={18} className="text-primary"/> Recommended For You</CardTitle>
                   <CardDescription>Personalized strategy suggestions based on your activity will appear here soon.</CardDescription>
               </CardHeader>
                <CardContent>
                   <p className="text-sm text-muted-foreground italic">(Feature coming soon...)</p>
               </CardContent>
           </Card>
        </motion.div>

        {isLoading ? renderSkeleton() 
         : filteredStrategies.length === 0 ? (
            <motion.p variants={itemVariants} className="text-muted-foreground text-center py-10">
                {strategies.length === 0 ? 'Loading strategies or none available.' : 'No strategies match your filters.'}
            </motion.p>
        ) : (
            <TooltipProvider>
                <motion.div 
                  className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6"
                  variants={containerVariants}
                >
                    {filteredStrategies.map((strategy) => (
                        <motion.div key={strategy.id} variants={itemVariants} layout>
                            <Card className="flex flex-col h-full border hover:shadow-md transition-shadow">
                                <CardHeader className="pb-3">
                                    <Badge variant="outline" className="mb-2 font-normal">{strategy.category}</Badge>
                                    <CardTitle className="text-base font-semibold flex items-center gap-2">
                                        <BookOpen className="h-4 w-4 text-primary flex-shrink-0" />
                                        {strategy.title}
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="flex-grow pb-3">
                                    <p className="text-sm text-muted-foreground line-clamp-3">
                                        {strategy.description}
                                    </p>
                                </CardContent>
                                <CardFooter className="flex justify-between items-center pt-0 pb-3 px-4">
                                    <div className="flex items-center gap-1">
                                        {[1, 2, 3, 4, 5].map((star) => (
                                            <Tooltip key={star}>
                                                <TooltipTrigger asChild>
                                                     <Button
                                                        variant="ghost"
                                                        size="icon"
                                                        className={cn(
                                                            "h-6 w-6 text-muted-foreground hover:text-yellow-400 transition-colors",
                                                            strategy.userRating && star <= strategy.userRating ? "text-yellow-400" : ""
                                                        )}
                                                        onClick={() => handleRateEffectiveness(strategy.id, star === strategy.userRating ? 0 : star)}
                                                        disabled={isSavingRating === strategy.id}
                                                    >
                                                         {isSavingRating === strategy.id ? (
                                                            <Loader2 className="h-4 w-4 animate-spin" />
                                                        ) : (
                                                            <Star className={cn("h-4 w-4", strategy.userRating && star <= strategy.userRating ? "fill-current" : "")}/>
                                                        )}
                                                     </Button>
                                                </TooltipTrigger>
                                                <TooltipContent>
                                                    <p>Rate Effectiveness: {star}</p>
                                                </TooltipContent>
                                            </Tooltip>
                                        ))}
                                    </div>
                                    <Button variant="outline" size="sm" onClick={() => openLearnMoreDialog(strategy)}>
                                        Learn More <ChevronRight className="h-4 w-4 ml-1"/>
                                    </Button>
                                </CardFooter>
                            </Card>
                        </motion.div>
                    ))}
                </motion.div>
            </TooltipProvider>
        )}

        <AddStrategyDialog 
            isOpen={isAddDialogOpen} 
            onClose={() => setIsAddDialogOpen(false)}
            onSave={handleAddStrategy} 
        />
        
        <Dialog open={!!learnMoreStrategy} onOpenChange={(open) => !open && closeLearnMoreDialog()}>
            <DialogContent className="sm:max-w-[525px]">
                {learnMoreStrategy && (
                    <>
                        <DialogHeader>
                            <DialogTitle className="flex items-center gap-2">
                                <BookOpen className="h-5 w-5 text-primary" />
                                {learnMoreStrategy.title}
                            </DialogTitle>
                            <DialogDescription>
                                <Badge variant="secondary" className="mt-1">{learnMoreStrategy.category}</Badge>
                            </DialogDescription>
                        </DialogHeader>
                        <div className="py-4 space-y-3">
                            <p className="text-sm text-foreground whitespace-pre-wrap">{learnMoreStrategy.description}</p>
                            {learnMoreStrategy.external_url && (
                                <a 
                                    href={learnMoreStrategy.external_url}
                                    target="_blank" 
                                    rel="noopener noreferrer" 
                                    className="inline-flex items-center text-sm text-primary hover:underline"
                                >
                                    Learn More Externally <ExternalLink className="h-4 w-4 ml-1" />
                                </a>
                            )}
                            {/* TODO: Could add more details here like: steps, best for, related strategies */} 
                        </div>
                        <DialogFooter>
                            <Button variant="outline" onClick={closeLearnMoreDialog}>Close</Button>
                        </DialogFooter>
                    </>
                )}
            </DialogContent>
        </Dialog>
    </motion.div>
  );
};

export default StrategiesPage;
